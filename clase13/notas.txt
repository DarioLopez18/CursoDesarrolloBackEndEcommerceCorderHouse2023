Mongo DB & CRUD en Mongo DB

->Concepto de base de datos

->Bases de datos relacionales y no relacionales

->Concepto e instalacion de MONGODB

Glosario:

WebSocket: Protocolo de comunicacion que permite una sesiona activa entre cliente y servidor.

Sweetalert2: Libreria que permite utilizar alertas con presentacion profesional.Sirve para autenticaciones.

Autenticacion: Proceso por el cual el usuario tiene que identificarse para poder hacer uso de algun servicio.

Deploy: Desplegar una aplicacion para pasar de un entorno local a la nube, con el fin de que los usuarios puedan
acceder a dicha aplicacion.

Github: Es una forja, o una plataforma de desarrollo creativo, donde podemos alojar nuestro repositorio con nuestra
aplicacion.

Glitch.com: Pagina utilizada para poder hacer deploy de nuestra aplicacion, a partir de su conexion con Github. 

Bases de datos:

    ->No relacionales
        ->Mongo DB
            ->Arquitectura
            ->instalacion
            ->Comandos iniciales
    ->relacionales

Fyle System

El gran problema de la persistencia:

Hasta este punto del curso, hemos estado trabajando con un filesystem (sistema de archivos) para hacer nuestros
almacenamientos principales.

Sin embargo, sabemos claramente que hay algunos problemas con el uso de archivos, como son:

->Tener que actualizar todo el archivo cuando hacemos algun cambio.

->Tener que leer todo el archivo cuando buscamos algun dato.

->Sin proteccion al momento de querer mover o modificar algo. 

Tal vez hasta el momento no has notado dichos problemas, sin embargo, cuando comenzamos a trabajar con cientos, miles
o millones de datos, realmente nos encontramos con un enorme problema de performance.

Es por ello que comenzó a buscarse una solución mas optima para trabajar con grandes volumenes de datos: surgieron
las bases de datos.

Bases de datos: Una base de datos no es mas que una recopilacion organizada de datos. Dichos datos deben compartir
algun contexto y son almacenados para poder utilizarse dentro de algun sistema. 

La base de datos solo se encarga de almacenar dichos datos, el uso que le demos posteriormente ya no competen a esta. 


¿Por que es util una base de datos?

Algunas de las cosas que podemos señalar sobre la utilidad de una base de datos son:

->Almacenamiento mas seguro: los datos que viven en una base de datos no son modificables directamente, por lo que 
estos no pueden ser cambiados tan facilmente. 

->Segmentacion de datos: Podemos separar los datos en "contextos" permitiendo así tener separados los datos de 
interes:

    ->Separar clientes potenciales de clientes solo interesados
    ->Separar productos existentes de productos fuera de stock.
    ->Separar diferentes usuarios por genero, nacionalidad, plan, etc. 

->Gestion sencilla una vez configurada: una vez que hemos definido los esquemas principales de nuestra base de 
datos, podremos realizar operaciones sobre estos datos como:

    ->Filtrar
    ->Ordenar
    ->Buscar datos especificos
    ->Actualizar un conjunto de datos sin afectar o tocar otros datos.

¿Que tan laborioso resulta hacer esto con archivos?

Comparacion entre filesystem y bd

Tarea: aumentar la edad de todos los usuarios femeninos en 1 año:

FileSystem:
    ->Leer el archivo
    ->Mapear los usuarios 1 a 1, actualizando la propiedad para aumentar en 1 año a los usuarios que cumplan con
    el genero femenino.
    ->Guardar el arreglo mapeado en un nuevo arreglo.
    ->Sobreescribir todo el archivo (incluyendo a los que no actualizamos)

Base de datos:
    ->Acceder a la base de datos
    ->Solicitar que se actualicen a los usuarios femeninos en 1 año. 

Tarea: Devolver solo el nombre y apellido de todos los usuarios, ordenados alfabeticamente.

FileSystem:

    ->Leer archivo
    ->Mapear el arreglo de usuarios, pasando a todos los usuarios a un objeto nuevo que solo cuente con las dos 
    propiedades de interes.
    ->Guardar el arreglo mapeado en un nuevo arreglo. 
    ->Aplicar sobre este arreglo un algoritmo de ordenamiento
    ->Devolver usuarios obtenidos

Base de datos:

    ->Acceder a la base de datos
    ->Solicitar una proyeccion de los usuarios en nombre y apellido, solicitando en la misma instruccion por orden 
    alfabetico
    ->Devolver usuarios obtenidos. 

Tarea: Agregar un usuarios nuevo con id autoincremental

FileSystem:

    ->Leer el archivo
    ->Parsear el contenido del archivo en un arreglo
    ->Calcular el id que corresponde al ultimo usuario del arreglo y asignarlo al usuario a Agregar
    ->Agregar el usuario al arreglo
    ->Escribir TODO el arreglo (incluyendo a todos los usuarios que ya existen) para sobreescribir el archivo.

Base de datos:

    ->Acceder a la base de datos
    ->Agregar el dato

Modelo relacional y no relacional:

La necesidad de distintos modelos de bases de datos:

Una vez que entendimos que la base de datos nos sirve para mantener los datos organizados, toca entender cuando 
utilizar un modelo relacional o un modelo no relacional.

    ->Una base de datos relacional refiere a estructura, relacion, dependencia, y de cambio controlado

    ->Una base de datos no relacional refiere a algo menos estructurado, con relaciones y dependencias mas 
    flexibles, y de cambios sumamente rapidos.

Modelo relacional: Refiere a modelos de datos donde se requieren estructuras mas firmes y estrictas sobre los 
datos. Ademas, se utilizan en datos mas controlados.

    ->Se basan en tablas,columnas y filas para gestionar sus datos
    ->Permiten conectar las tablas a partir de "relaciones" basadas en llaves primarias y foraneas.
    ->Sirve para datos de control como:
        ->Sistemas bancarios
        ->Sistemas de clima (no tiempo atmosferico)
        ->Sistemas de peliculas
    ->Su lenguaje es SQL (Structured Query Languaje)
    ->Algunos sistemas SQL son:
        ->PostgreSQL
        ->Oracle
        ->MySQL
        ->MariaDB
El problema de las BD relacionales: 

    ->Cuando las aplicaciones que necesitamos incrementan sus requisitos, los datos cambian mas rapido y son 
    mas complejos, son mas inconsistentes y por lo tanto nuestra base de datos relacional comienza a volverse
    lenta.

Solucion: Introducir un modelo mas flexible:

    ->Se desarrolla un modelo donde los datos sean mas flexibles, tanto en su estructura, como en asociacion.

    ->Todo esto con el fin de crear datos pensados para desempeño, no para consistencia inmediata. 

Modelo no relacional: 
    ->La flexibilidad de los datos lo hace considerablemente mas rapido en cuanto su accesibilidad.
        ->Puede basarse en:
            ->Clave valor
            ->Documentos
            ->Graficos
            ->Memoria. 
        
    ->Son bases de datos muy utiles para organizar y gestionar informacion no estructurada, o cuando no se tiene
    nocion clara de los datos a almacenar.

    ->Alto grado de escalabilidad y de performance
    ->No utiliza SQL como lenguaje
    ->Algunos sistemas No SQL son.
        ->Mongo DB
        ->Redis
        ->Dynamo DB
¿Cuando usar cada modelo?

Modelo relacional:
    ->Cuando el volumen de los datos no crece, o bien lo hace poco a poco
    ->Cuando las necesidades del proceso pueden atenderse en un solo servidor
    ->Cuando no existen picos de uso por parte de los usuarios del sistema.

MOdelo no relacional:
    ->Cuando el volumen de los datos crece rapidamente
    ->Cuando las necesidades del proceso son tan altas y tan constantes, que se requieren multi servidores.
    ->Cuando los usuarios saturan el sistema y generan "picos de uso"

MongoDB:

    ->Bases de datos no relacional orientada a documentos.
    ->En lugar de tablas, opta por utilizar colecciones.
    ->Cada documento que ingresamos a una coleccion puede tener diferente estructura 
    ->Puede utilizarse en modo local o en la nube. 

MONGO DB CARACTERISTICAS:

->Almacena datos en documentos flexibles similares a JSON: la estructura de datos puede cambiar con el tiempo.

->El modelo de documentos se asigna a los objetos en el codigo de su aplicacion para facilitar el trabajo con los
datos. 

->Las consultas ad hoc, la indexacion y la agregacion en tiempo real ofrecen maneras potentes de acceder a los datos
y analizarlos. 

->Mongo DB es una base de datos distribuida en su nucleo, por lo que la alta disponibilidad, la escalabilidad 
horizontal y la distribucion geografica estan integradas y son faciles de usar.

->Mongo db es de uso gratuito. 

Documentos:

    ->Una de las grandes ventajas de un documento es que este se basa en el concepto clave-valor, esto, como sabras,
    se asemeja muchisimo a un objeto como el que has trabajado en javascript.

    ->No son propiamente un "objeto" como para llamarlos de tal forma, sino que MONGO DB trabaja con una extension
    de los archivos conocidos como BSON. Esto es lo que realmente permanece en la base de datos.

    ->Los esquemas de una base de datos en MONGO db, con ayuda de elementos como moongose, son facilmente 
    manipulables, ya que permite definirlos con una estructura casi identica a la de un objeto. 

    Colecciones en Mongo DB:

    Cada vez que pensemos en un grupo de datos, lo mencionaremos como una coleccion, en esta almacenaremos cada
    documento individual (similar a una tabla con sus registros) 
        ->Coleccion de usuarios
        ->Coleccion de productos
        ->Coleccion de mascotas. 


->show dbs mostrara la lista de bases de datos que tengamos activas

->use <nombre> crea una nueva base de datos (en caso de no existir) y se posiciona en ella para utilizarla.

->db.createCollection(nombre) creara nuestra primera coleccion para comenzar a ingresar documentos

Una vez que sabemos que coleccion vamos a utilizar, utilizaremos el comando insertOne pasando el objeto que queremos
guardar en dicha coleccion.

db.usuarios.insertOne({name:"Miguel",last_name:"Espinoza",age:30,email:"correoMiguel@hotmail.com"})

Leyendo informacion de nuestra base de datos:

->Utilizamos la misma sintaxis que un objeto o una clase de javascript, leemos la coleccion con el metodo find()

db.usuarios.find()

MongoDb nos autogestiona un id, mismo que nos asegura contar con una clave irrepetible,evitando que tengamos que
programar nuestra propia gestion de identificadores. 

