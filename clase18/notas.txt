Cookie: Pequeña parte de información que se almacena en el navegador al momento de visitar un sitio web, 
utilizado para conservar detalles de información útiles para el sitio web.

CookieParser : Módulo de Node que permite gestionar cookies desde el servidor, con el fin de poder obtenerlas, 
leerlas, escribirlas o eliminarlas. 

Cookie.maxAge: Indica en milisegundos el tiempo de vida de la cookie. Si no se especifica, la cookie persistirá 
hasta que se elimine

Signed Cookie: Cookie firmada que permite agregar seguridad, la cual escucha si la cookie fue alterada, 
invalidándose en dado caso. 

Session: Ciclo de interacción entre un sitio y un cliente, donde el cliente cuenta con un identificador de 
sesión para reconocimiento desde el servidor. 

express-session:   Módulo de Node que permite gestionar sesiones y almacenarlas en el servidor. 

File Storage
    ->Almacenamiento de una session
        ->MongoAtlas
    ->Utilidad
Primer login

Una sesión es un vínculo que se genera cuando el cliente conecta con un servidor, este vínculo se representa
por una sessionId, la cual se guarda en el navegador como identificador de la sesión. Sin embargo… 
¿Dónde se guarda la sesión en el servidor?

Memory Storage

El almacenamiento de una sesión por memory storage es exactamente igual a la persistencia en memoria que 
trabajamos la clase pasada. Es un almacenamiento muy peligroso, ya que si el servidor muere o se reinicia, 
la sesión morirá con él y no habrá forma de recuperarla.

Una vez entendido el carácter de riesgo de almacenar una sesión en memoria, nos surge la duda: 
¿cómo podríamos hacer persistir estas sesiones para evitar cualquier tema en el reinicio o caída repentina 
de un servidor?

Seguramente tienes clara la idea, ya que lo hiciste con tus productos y tu carrito: Vamos a utilizar File Storage,
es decir, guardar nuestra sesión en un archivo, para poder consultar las sessions de un lado
diferente a la memoria del servidor.

Al igual que las primeras clases del curso, el File storage permitirá dar una persistencia de archivos a las sesiones que trabajamos, esto hará que el servidor pueda tomarlas de algún lado en caso de que algo inesperado llegase a pasar (un reinicio, o una caída).

Así, los usuarios pueden seguir haciendo consultas con sus sessionid, y el servidor podrá consultarlas del 
archivo que persiste en éste.
Es un recurso simple y que tiene sus defectos, sin embargo, es una solución sencilla para resolver el asunto de 
sesiones, sin tener que ocupar recursos de terceros.

Aun cuando reiniciemos el servidor, la sesión persistirá en el tiempo indicado

Cuando llegue a expirar una sesión, el servidor generará un nuevo archivo con la consulta, indicando 
el nuevo sessionId.

Los archivos viejos no se limpian automáticamente, quedan en un cementerio de registros, lo cual puede 
generar complicaciones futuras.

Seguro ya lo habías pensado! Si FileSystem terminará generando conflictos, ¿podría solucionarse con bases de datos
, como hicimos con nuestros carritos y productos? La respuesta es: sí, ¡y en qué forma!

Session puede trabajar de la mano con MongoDB y MongoAtlas para poder guardar una sesión en una base de datos, 
esto permitirá que las sesiones tengan una gestión más limpia, además de poder contar con autoeliminación de 
sesiones expiradas. 
